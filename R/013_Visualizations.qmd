---
title: "Visualizations"
format: html
editor: source
---

# Preamble

## Dependencies

```{r setup, include=FALSE}
suppressPackageStartupMessages({
library(Matrix)
library(Seurat)
library(SingleCellExperiment)
library(muscat)
library(sechm)
library(viridis)
library(ggsci)
library(patchwork)
library(pheatmap)
})

knitr::opts_chunk$set(echo = FALSE)
```

```{r Do you want to save all data and visualization?}
SAVING = FALSE
```

# Loading data

```{r loading data}
sce <- readRDS("../../Data/012_sce_labelled.rds")

# Marker genes
marker_list <- readxl::read_excel("../Markers/Marker_list_BU.xlsx")
marker_list <- marker_list[,-ncol(marker_list)]

# Filter and leave only those marker genes existed in the cluster
exist_list <- lapply(marker_list, function(x){
  x <- x[!is.na(x)]
  x <- x[x %in% row.names(sce)]})

# Cell type name list
meta_data <- c(DAM="Disease-Associated Microglia", 
               WAM="White Matter-Associated Microglia",
               CAM="CNS-Associated Macrophages",
               IFM="Inflammatory Microglia",           
               PGM="Phagocytic Microglia",
               HSM="Homeostatic Microglia",
               Cell_Cycle="Cell Cycle",                
               SAM="Senescence-Associated Microglia",
               PAM="Pre-active Microglia")

# Bulk-seq marker genes
bulkGenes <- read.csv2("/Users/jiesun/Storage/Work/Projects/PAST/Microglial_annotation/Data/DEG_no28.csv")
```

# Define functions

```{r define functions}

#' Plot a heatmap object using sechm package to indicate the expression level for 
#' different marker genes with their corresponding cell type annotation
#' 
#' @param sceObject the singleCellExperiment object to input
#' @param markerList the list of marker genes for plotting. The marker gene list 
#'    should have corresponding cell type as their name. A typical list should 
#'    contain several array objects for marker genes with each of them named by the 
#'    corresponding cell types. 
#' @param cellType string or list of string indicating which cell type(s) are used for 
#'    plotting
#' @param heatmapColor color option for heatmap in viridis
#' @param gaps_col if adding column gaps in the heatmap (in the case of plotting
#'    merged sceObject with different column indication)
#'    
#' @author Jieran Sun

plotSpecificHeatmap <- function(sceObject, markerList, cellType = NULL, heatmapColor = "C", gaps_col = NULL){
  
  if (is.null(cellType) == FALSE) {
    markerList <- markerList[cellType]
  }
  # check markerList 
  if (is.null(names(markerList))) {
    names(markerList) <- paste("list", seq_along(markerList), sep = "-")
  }
  
  # Assign a new metadata called cell type to assign the markers on them
  assayNames(sceObject) <- "logcounts"
  rowData(sceObject)$cellType <- NA
  rowData(sceObject)[unlist(markerList),"cellType"] <- rep(names(markerList),lengths(markerList))
  
  # Generate the heatmap based on the selection
  geneToPlot <- unlist(markerList)
  sechm::sechm(sceObject, geneToPlot, 
             assayName = "logcounts", gaps_row = "cellType", gaps_at = gaps_col,
             show_colnames = TRUE, do.scale = TRUE, na_col = "black",
             breaks=1, row_title_rot=0, show_rownames = TRUE, 
             hmcols = viridis_pal(option = heatmapColor)(100))
}


#' Plot the overall heatmap for the singleCellExperiment Object with different 
#' colors indicating different cell type and a legend for information (optional)
#' 
#' @param sceObject the singleCellExperiment object to plot
#' @param markerList the list of marker genes for plotting. The marker gene list 
#'    should have corresponding cell type as their name. A typical list should 
#'    contain several array objects for marker genes with each of them named by the 
#'    corresponding cell types. 
#' @param metaData an optional list corresponding the cell type acronym to the 
#'    full name. metaData file is essentially a vector of character (full names)
#'    with the acronym as the name for the characters. the full name will be used 
#'    for the legend. If the metaData is NULL the system will just use the acronym 
#'    from the markerlist as the legend name 
#' @param showAll do we plot all the cell types in the markerList?
#' @param cellType only if showAll is FALSE, we specify marker genes from which 
#'    cell type to plot 
#' @param heatmapColor color options from viridis
#' @param clusterRow do we cluster the row? if so the makerGene-cellType correspondence
#'    cannot be maintained 
#' @param clusterCOl do we cluster the column such that similar cell type/cluster are 
#'    plot next to each other
#' @param showLegend if we want to show legend
#' 
#' @author Jieran Sun
#' 
#' Notice: no. of cell type/legend <= 16! (for color plotting purpose)

showOverallHeatmap <- function(sceObject, markerList, metaData, showAll = TRUE, cellType = NULL, 
                               heatmapColor = "C", clusterRow = FALSE, clusterCol = TRUE,
                               showLegend = TRUE) {
  if (showAll != TRUE) {
    if (is.null(cellType)) {
      stop("Please specify cell types to show.")
    }
    markerList <- markerList[cellType]
  }
  
  if (showLegend == TRUE) {
    # Generate heatmap block and anntoation color
    if(is.null(metaData)) {
      cellname <- names(markerList)
    } else {
      cellname <- c(metaData[names(markerList)])
    }
    
    # Set up the color for the heatmap 
    legendColors <- pal_simpsons()(length(cellname))
    names(legendColors) <- cellname
    legendColors <- list(type = legendColors)
    
    # Set up the annotation matrix
    annoDF <- data.frame(row.names=unlist(markerList), 
               type=rep(cellname, lengths(markerList)))
    
    pheatmap(assay(sceObject)[unlist(markerList),], 
               color = viridis_pal(option = heatmapColor)(100),
               annotation_row = annoDF, 
               annotation_colors = legendColors,
               gaps_row = cumsum(lengths(markerList)),
               split=rep(cellname, lengths(markerList)), 
               cluster_rows=clusterRow, cluster_cols = clusterCol,
               scale="row")
  } else {
    pheatmap(assay(sceObject)[unlist(markerList),], 
               color = viridis_pal(option = heatmapColor)(100),
               gaps_row = cumsum(lengths(markerList)),
               split=rep(cellname, lengths(markerList)), 
               cluster_rows=clusterRow, cluster_cols = clusterCol,
               scale="row")
  }
}


 
#' Plot a list of Violin plot/Ridge plot/Heatmap plot given a list of genes. 
#' 
#' @param conutObject either the seurat object (for violin and ridge plot) or the
#'    sceObject (for the heatmap plot)
#' @param feature_list essentially the markerList in the previous functions
#' @param plot_type type of plot to return, can be Violin plot ("Vln"), ridge 
#'    plot ("Rdg"), and heatmap ("Heatmap")
#' @param group_var  columns on the metadata file in the seurat object indicating 
#'    if we're using clusters or cell types (for heatmap it can be NULL, but it 
#'    need to be used for the pdf generated if saving is TRUE, so maybe just 
#'    keep it as the same way)
#' @param saving if we want to save the final results
#' 
#' @return a list of plots based on the parameters


plotMarkerList <- function(countObject, feature_list, plot_type = c("Vln", "Rdg", "Htm"), 
                           group_var = c("orig.ident", "seurat_clusters","label_calibrated","label_auto"), 
                           saving = FALSE){
  
  if (is.list(feature_list[[1]]) != TRUE) {
    feature_list <- list(feature_list)
  }
  
  Plot_list <- lapply(seq_along(feature_list), function(ind) {
    feature <- feature_list[[ind]]
    if (plot_type == "Vln") {
      Plot <- VlnPlot(countObject, features = feature, 
                group.by = sprintf("%s", group_var), cols = pal_simpsons()(16),pt.size = 0) + 
        plot_annotation(title = sprintf("list_%s", ind))
    } else if (plot_type == "Rdg") {
      Plot <- RidgePlot(countObject, features = feature, 
                group.by = sprintf("%s", group_var), cols = pal_simpsons()(16)) + 
        plot_annotation(title = sprintf("list_%s", ind))
    } else if (plot_type == "Htm") {
      Plot <- sechm::sechm(countObject, feature, 
             assayName = "logcounts", cluster_cols = FALSE,
             show_colnames = TRUE, do.scale = TRUE, na_col = "black",
             breaks=1, row_title_rot=0, show_rownames = TRUE,
             hmcols = viridis_pal(option = "C")(50))
    }
      return(Plot)
  })
  
  if (saving == TRUE) {
    label <- strsplit(group_var, "[.]|_")[[1]][2]
    pdf(file.path(working_path, sprintf("Visualization/Markers_%s_%s.pdf", plot_type, label)), 
        width = 20, height = 20)
    print(Plot_list)
    dev.off()
  }
  
  return(Plot_list)
}
```


# Heatmaps

## Cluster-based

```{r process the data}
sce_cluster <- muscat::aggregateData(sce, "logcounts", by="seurat_clusters", fun="mean")
SummarizedExperiment::assayNames(sce_cluster) <- "logcounts"
```


```{r Cluster-based heatmaps}
(heatmap_ClusterOverview <- plotSpecificHeatmap(sce_cluster, exist_list))
(hmCluster <- showOverallHeatmap(sce_cluster, markerList = exist_list, metaData = meta_data))
(hmClusterGene <- showOverallHeatmap(sce_cluster, markerList = exist_list, metaData = meta_data, clusterRow = TRUE))
```

## Label-based

```{r process data into label-aggregated}
sce_labelAuto <- aggregateData(sce, "logcounts", by=c("label_auto"), fun="mean")
sce_labelCali <- aggregateData(sce, "logcounts", by=c("label_cali"), fun="mean")
assayNames(sce_labelAuto) <- "logcounts"
assayNames(sce_labelCali) <- "logcounts"
```

```{r Label-based heatmaps}
(hmLabelAuto <- showOverallHeatmap(sce_labelAuto, markerList = exist_list, metaData = meta_data))
(hmLabelCali <- showOverallHeatmap(sce_labelCali, markerList = exist_list, metaData = meta_data))
```


```{r saving data}
if (SAVING){
  pdf(file.path(working_path, "../Visualization/Overall_Heatmaps.pdf"), width = 15, height = 15)
  print(heatmap_ClusterOverview)
  plot.new()
  print(hmCluster)
  plot.new()
  print(hmClusterGene)
  plot.new()
  print(hmLabelAuto)
  plot.new()
  print(hmLabelCali)
  plot.new()
  dev.off()
}
```


# Sankey-graph

```{r Sankey graph}
links <- data.table(table(source=unlist(paste0("Cluster_", sce$seurat_clusters)), 
                             target=unlist(sce$label_calibrated))) %>% 
  .[N != 0,] %>% .[order(-N),]


nodes <- data.frame(
  name=c(as.character(links$source), as.character(links$target)) %>% 
    unique()
)

links$IDsource <- match(links$source, nodes$name)-1 
links$IDtarget <- match(links$target, nodes$name)-1

my_color <- "d3.scaleOrdinal() .domain([' Cluster_0 ',' Cluster_1 ',' Cluster_2 ',' Cluster_3 ',' Cluster_4 ',' Cluster_5 ',' Cluster_6 ',' Cluster_7 ',' Cluster_8 ',' Cluster_9 ',' Cluster_10 ',' Cluster_11 ',' CAM ',' Cell_Cycle ',' DAM ',' HSM ',' IFM-I ',' IFM-II ',' PAM ',' SAM ']) .range([' #FED439FF ',' #709AE1FF ',' #8A9197FF ',' #D2AF81FF ',' #FD7446FF ',' #D5E4A2FF ',' #197EC0FF ',' #F05C3BFF ',' #46732EFF ',' #71D0F5FF ',' #370335FF ',' #075149FF ',' #FF6F00FF ',' #C71000FF ',' #008EA0FF ',' #8A4198FF ',' #5A9599FF ',' #FF6348FF ',' #84D7E1FF ',' #FF95A8FF '])"


(sankeyGraph <- sankeyNetwork(Links = links, Nodes = nodes,
                   Source = "IDsource", Target = "IDtarget",
                   Value = "N", NodeID = "name", 
                   sinksRight=FALSE, fontSize = 12, 
                   fontFamily = "Helvetica", 
                   colourScale = my_color))
```


# Marker gene-specific visualization

```{r}
geneList <- c("Clec7a", "Spp1", "Gpnmb", "Itgax", "Lgals3", "P2ry12", "Hexb")
geneList <- c(geneList, bulkGenes$X[bulkGenes$padj <= 0.05])
geneList <- geneList[!is.na(geneList)]

(presentHeatmap <- plotMarkerList(countObject = sce_labelCali, feature_list = geneList, plot_type = "Htm", group_var = "orig.ident"))

# Create a seurat object for vln and ridge plot
seu <- CreateSeuratObject(counts = assay(sce),
                          meta.data = as.data.frame(colData(sce)))
LayerData(seu, "data") <- assay(sce)
presentVln <- VlnPlot(seu, features = geneList, group.by = "label_cali", cols = pal_simpsons()(16),pt.size = 0, ncol = 10) 
presentRdg <- RidgePlot(seu, features = geneList, group.by = "orig.ident", cols =  pal_simpsons()(16), ncol = 10) 

if (SAVING) {
  pdf("../Visualization/Marker_Vln_ident.pdf", width = 30, height =18)
  print(presentHeatmap)
  plot.new()
  print(presentVln)
  print(presentRdg)
  dev.off()
}
```
# Epilog

```{r}
sessionInfo()
```




