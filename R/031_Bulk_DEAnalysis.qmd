---
title: "Bulk-Seq Analysis for Microglial cells"
author: "Jieran Sun"
format: html
editor: source
---

# Preamble

## Loading libraries

```{r set up, include=FALSE}
suppressPackageStartupMessages({
  library(data.table)
  library(edgeR)
  library(org.Mm.eg.db)
  library(DESeq2)
  library(ggplot2)
  library(ggrepel)
})
```

## Load data

```{r}
dt <- fread("../Data/231124_SuzanneWolf_feature_counts")
geneDF <- dt[, 1, drop=FALSE]
countDF <- as.data.frame(dt[, 7:ncol(dt)])

sampleID <- gsub("./output/star_salmon/", "", colnames(countDF), fixed = TRUE)
sampleID <- gsub(".markdup.sorted.bam", "", sampleID, fixed = TRUE)
colnames(countDF) <- sampleID
rownames(countDF) <- geneDF$Geneid

group <- rep(c("KO", "WT"), each = 5)
group <- as.factor(group)
names(group) <- sampleID

sample_list <- c(21:30)
names(sample_list) <- sampleID
```

```{r construct DGE list object for DE-seq analysis}
y <- DGEList(counts = countDF, 
             group = group, 
             genes = geneDF)

# Adding gene labels
y$genes$Symbol <- mapIds(org.Mm.eg.db, rownames(y),
                          keytype="ENSEMBL", column="SYMBOL")
# Filter our non-symbol genes
y <- y[!is.na(y$genes$Symbol), ]

# Try removing 1 sample (28)
# y <- y[, colnames(y)!="SBR_F49_0028_P22_V11"]
# group <- group[-8]

# Try removing the KO genes
# y <- y[y$genes$Symbol != "Gpnmb",]
```

# Quality Control

Quality control: Percentage of sequencing mapped to the genome

```{r make design matrix}
design <-model.matrix(~0+group)
colnames(design) <- levels(group)
design
```

```{r let's see its expression value before filtering}
AveLogCPM <- aveLogCPM(y)
hist(AveLogCPM)
```

```{r filter expression}
keep <- filterByExpr(y, design)
y <- y[keep, , keep.lib.sizes=FALSE]
table(keep)
```

```{r now check the cpm after filtering}
AveLogCPM <- aveLogCPM(y)
hist(AveLogCPM)
```

# All DESeq calculation

> Before jumping into individual processing case, remember to run the processing block!!

```{r process data}
matSave <- y$counts
rownames(matSave) <- make.names(y$genes$Symbol, unique = TRUE)

y$samples$random <- rep(c("group1", "group2"), 5)
y$samples$sample <- c(21:30)
```

```{r normal cases}
dds <- DESeqDataSetFromMatrix(countData = matSave,
                              colData = y$samples,
                              design= ~ group)
dds <- DESeq(dds)

res <- results(dds, name="group_WT_vs_KO")
# or to shrink log fold changes association with condition:
res <- lfcShrink(dds, coef="group_WT_vs_KO", type="apeglm")
```

```{r random cases}
dds_rand <- DESeqDataSetFromMatrix(countData = matSave,
                              colData = y$samples,
                              design= ~ random)
dds_rand <- DESeq(dds_rand)

res_rand <- results(dds_rand, name="random_group2_vs_group1")
# or to shrink log fold changes association with condition:
res_rand <- lfcShrink(dds_rand, coef="random_group2_vs_group1", type="apeglm")
```

```{r subset cases}
y_sub <- y[, c("SBR_F49_0022_P22_V11", "SBR_F49_0024_P22_V11", "SBR_F49_0025_P22_V11", 
               "SBR_F49_0026_P22_V11", "SBR_F49_0029_P22_V11", "SBR_F49_0030_P22_V11")]

matSave <- y_sub$counts
rownames(matSave) <- make.names(y_sub$genes$Symbol, unique = TRUE)

dds_sub <- DESeqDataSetFromMatrix(countData = matSave,
                              colData = y_sub$samples,
                              design= ~ group)
dds_sub <- DESeq(dds_sub)

res_sub <- results(dds_sub, name="group_WT_vs_KO")
# or to shrink log fold changes association with condition:
res_sub <- lfcShrink(dds_sub, coef="group_WT_vs_KO", type="apeglm")
```

```{r case remove 28}
y_no28 <- y[, setdiff(colnames(y), c(#"SBR_F49_0022_P22_V11", 
                                     "SBR_F49_0028_P22_V11"))]

matSaveNo28 <- y_no28$counts
rownames(matSaveNo28) <- make.names(y_no28$genes$Symbol, unique = TRUE)

dds_no28 <- DESeqDataSetFromMatrix(countData = matSaveNo28,
                              colData = y_no28$samples,
                              design= ~ group)
dds_no28 <- DESeq(dds_no28)

res_no28 <- results(dds_no28, name="group_WT_vs_KO")
# or to shrink log fold changes association with condition:
res_no28 <- lfcShrink(dds_no28, coef="group_WT_vs_KO", type="apeglm")
```

```{r PCA visualization}
dds_norm <- rlog(dds_no28)
plotPCA(dds_norm, intgroup = "group") + geom_label(aes(label=dds_norm$sample))
```

# Visualization

Change the first block from below to identify which sample/case do you want to focus on.

```{r select which results to visualize}
res_visual <- res_no28

resDF <- as.data.frame(res_visual)
resDF <- resDF[!is.na(resDF$padj), ]
resDF$Symbol <- rownames(resDF)
resDF$isDEG <- resDF$padj < 0.05
```

```{r MA plot random}
maPlotDESeq <- ggplot(resDF, aes(x = baseMean, y = log2FoldChange)) + 
  geom_point(aes(color = isDEG)) + 
  #geom_hline(yintercept = -log10(0.05)) + 
  geom_text_repel(data=resDF[resDF$baseMean > 4 & abs(resDF$log2FoldChange) > 1, ], 
                  aes(x = baseMean, y = log2FoldChange, label = Symbol)) + 
  scale_color_manual(values = c("grey", "blue")) +
  theme_bw()

maPlotDESeq
```

```{r volcano plot random}
volPlotDESeq <- ggplot(resDF, aes(x = log2FoldChange, y = -log10(padj))) + 
  geom_point(aes(color = isDEG)) + 
  geom_hline(yintercept = -log10(0.05)) + 
  geom_text_repel(data=resDF[resDF$padj < 0.05 & abs(resDF$log2FoldChange) > 0.2, ], 
                  aes(x = log2FoldChange, y = -log10(padj), label = Symbol)) + 
  scale_color_manual(values = c("grey", "blue")) 

volPlotDESeq
```

```{r DESeq genes expression}
# Select out all the DEGs
n_deg <- sum(resDF$isDEG)
keyGenes <- as.data.table(resDF)[isDEG==TRUE, ][order(-abs(log2FoldChange)), Symbol]

# Generated CPM 
y <- calcNormFactors(y)
y_lcpm <- edgeR::cpm(y, log = TRUE)
y_cpm <- edgeR::cpm(y, log = FALSE)
y_raw <- y$counts

# Filter key genes
degDF <- as.data.table(y_raw)[, gene:= make.names(y$genes$Symbol, unique = TRUE)
                               ][gene %in% keyGenes, ]
```

```{r}
# Extract the 
degPlotDF <- melt(degDF, id.vars = "gene", 
                  variable.name = "sample_ID", 
                  value.name = "counts")[, group := group[sample_ID]
                                         ][, sample := sample_list[sample_ID]
                                           ][, gene := factor(gene, levels = keyGenes)]

bp_rand <- ggplot(degPlotDF, aes(x = "gene", y = counts, fill = group)) + 
  geom_boxplot(outlier.alpha = 0) + 
  geom_text(aes(label = sample, color = group), alpha = 0.9, size = 3, position = position_jitter(seed = 1)) + 
  facet_wrap(~gene, nrow = 2) + 
  theme_minimal() + 
  theme(axis.title.x = element_blank())

bp_rand
```

# Epilog

```{r save data}
matSave <- y$counts
rownames(matSave) <- make.names(y$genes$Symbol, unique = TRUE)
write.csv2(matSave, "../Data/031_Bulk_filteredCounts.csv")
write.csv2(res_no28[order(res_no28$padj),], "../Data/DEG_Bulk_no28.csv")
saveRDS(y, "../Data/031_DGEList.rds")
```

```{r check information}
sessionInfo()
```
